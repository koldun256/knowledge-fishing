// src/pages/Pond.jsx
import React, { useEffect, useMemo, useState } from 'react';
import ReactDOM from 'react-dom';
import { useParams, useNavigate } from 'react-router-dom';

// –∫–æ–Ω—Ç–µ–∫—Å—Ç
import { PondProvider, usePond } from '../context/PondContext';

// –∫–∞–Ω–≤–∞—Å-—Å—Ü–µ–Ω–∞
import CanvasStage from '../components/CanvasStage';

// —Å–ª–æ–∏
import createWaterSurfaceLayer from '../layers/waterSurface';
import createUnderwaterBackLayer from '../layers/underwaterBack';
import createUnderwaterFrontLayer from '../layers/underwaterFront';
import createFishesLayer from '../layers/fishes';
import createFishingLineLayer from '../layers/fishingLine';
import createBoatLayer from '../layers/boat';

// –¥–∏–∞–ª–æ–≥
import FishingDialog from '../components/FishingDialog';
import CreateFishModal from '../components/CreateFishModal';
import CreateFishesModal from '../components/CreateFishesModal'; // –ù–æ–≤—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç

// —Å–µ—Ä–≤–∏—Å—ã (–º–æ–∫–∏)
import { pondService } from '../services/pondService';
import { fishService } from '../services/fishService';

// –∞—Å—Å–µ—Ç—ã (—Å–ø—Ä–∞–π—Ç —Ä—ã–±)
import { Assets } from '../utils/assets';

function PondInner() {
  const { pondId } = useParams(); // –ü–æ–ª—É—á–∞–µ–º pondId –∏–∑ URL
  const navigate = useNavigate();
  const {
    pond, setPond,
    fishes, setFishes,
    getState,
    fishing, setFishing,
    boat,
    dialog,
  } = usePond();

  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [isCreateFishModalOpen, setIsCreateFishModalOpen] = useState(false);
  const [isCreateFishesModalOpen, setIsCreateFishesModalOpen] = useState(false); // –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∞—Å—Å–µ—Ç–æ–≤ + –¥–∞–Ω–Ω—ã—Ö –ø—Ä—É–¥–∞/—Ä—ã–±
  useEffect(() => {
    if (!pondId) {
      setError('ID –ø—Ä—É–¥–∞ –Ω–µ —É–∫–∞–∑–∞–Ω');
      setLoading(false);
      return;
    }

    let cancelled = false;
    
    (async () => {
      try {
        setLoading(true);
        setError(null);
        
        console.log('Loading pond data for ID:', pondId);
        
        await Assets.loadImage('fishSheet', '/assets/fish_spritesheet_px.png').catch((e) => {
          console.warn('Failed to load fish sprite:', e);
        });
        
        const [pondData, fishesData] = await Promise.all([
          pondService.getPondById(pondId),
          fishService.getFishesByPondId(pondId),
        ]);
        
        if (!cancelled) {
          setPond(pondData);
          setFishes(fishesData);
          console.log('Pond and fishes data loaded successfully');
        }
      } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', e);
        if (!cancelled) {
          setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä—É–¥–∞');
        }
      } finally {
        if (!cancelled) setLoading(false);
      }
    })();
    
    return () => { cancelled = true; };
  }, [pondId, setPond, setFishes]);

  const handleCreateFish = async (pondId, fishData) => {
    try {
      console.log('Creating fish with data:', fishData);
      const newFish = await fishService.createFish(pondId, fishData);
      
      setFishes(prev => [...prev, newFish]);
      console.log('Fish created and added to list:', newFish);
      
      return newFish;
    } catch (error) {
      console.error('Error in handleCreateFish:', error);
      throw error;
    }
  };

  // –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ä—ã–±
  const handleCreateFishes = async (pondId, fishesData) => {
    try {
      console.log('Creating multiple fishes with data:', fishesData);
      
      // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –ø—Ä–æ–º–∏—Å–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å–µ—Ö —Ä—ã–±
      // const createPromises = Object.entries(fishesData).map(([key, fishData]) => {
      //   return fishService.createFish(pondId, fishData);
      // });

      
      // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
      const newFishes = await fishService.createFishes(pondId, fishesData);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ—Ö –Ω–æ–≤—ã—Ö —Ä—ã–± –≤ —Å–ø–∏—Å–æ–∫
      setFishes(prev => [...prev, ...newFishes]);
      console.log('Fishes created and added to list:', newFishes);
      
      return newFishes;
    } catch (error) {
      console.error('Error in handleCreateFishes:', error);
      throw error;
    }
  };

  const layers = useMemo(() => ([
    createWaterSurfaceLayer({
      levelGradients: [
        ['#7EC8FA', '#5FB4F5'],
        ['#57ABF2', '#2F8EE8'],
        ['#277FD7', '#1B63B9'],
        ['#134A97', '#0C3877'],
      ],
    }),
    createUnderwaterBackLayer({
      enableGradient: true,
      enableVegetation: true,
      enableInternalWaves: false,
      enableCaustics: false,
    }),
    createFishesLayer(),
    createUnderwaterFrontLayer({
      enableDepthFog: true,
      enableMotes: true,
      enableBubbles: true,
    }),
    createFishingLineLayer(),
    createBoatLayer(),
  ]), []);

  const startFishing = async () => {
    try {
      if (fishing.phase !== 'idle' || dialog.open) return;

      const nextFish = await pondService.getNextFish(pondId);

      setFishing(prev => ({
        ...prev,
        phase: 'casting',
        targetFishId: nextFish.id,
        boatX: boat?.x ?? window.innerWidth * 0.5,
        hookX: null,
        hookY: null,
      }));
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Ä—ã–±–∞–ª–∫–∏:', e);
    }
  };

  if (loading) return <div className="p-8 text-center">–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä—É–¥–∞...</div>;
  if (error) return (
    <div className="p-8 text-center">
      <div className="text-red-500 mb-4">{error}</div>
      <button 
        onClick={() => navigate('/')}
        className="bg-blue-600 text-white px-4 py-2 rounded"
      >
        –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –ø—Ä—É–¥–æ–≤
      </button>
    </div>
  );
  if (!pond) return <div className="p-8 text-center text-red-500">–ü—Ä—É–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω</div>;

  const canStart = fishing.phase === 'idle' && !dialog.open;

  return (
    <>
      <CanvasStage
        skyRatio={0.12}
        layers={layers}
        getState={getState}
        className="fixed inset-0 z-0"
      />

      {/* –ö–Ω–æ–ø–∫–∏ —Å transform –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å—Ç–µ–∫–∏–Ω–≥–∞ */}
      <div className="absolute top-4 left-4 z-[9999] transform">
        <div className="flex items-center gap-2">
          <button
            onClick={() => navigate('/')}
            className="bg-white/95 hover:bg-white text-slate-800 px-4 py-2 rounded-lg shadow-lg border border-gray-300 transition-all"
          >
            ‚Üê –ù–∞–∑–∞–¥ –∫ –ø—Ä—É–¥–∞–º
          </button>
          
          <button
            onClick={() => setIsCreateFishModalOpen(true)}
            className="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg shadow-lg transition-all"
          >
            üêü –°–æ–∑–¥–∞—Ç—å —Ä—ã–±—É
          </button>
          
          {/* –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ä—ã–± */}
          <button
            onClick={() => setIsCreateFishesModalOpen(true)}
            className="bg-green-700 hover:bg-green-800 text-white px-4 py-2 rounded-lg shadow-lg transition-all"
          >
            üêüüêü –°–æ–∑–¥–∞—Ç—å —Ä—ã–±
          </button>
        </div>
      </div>

      {canStart && (
        <div className="absolute top-4 right-4 z-[9999] transform">
          <button
            onClick={startFishing}
            className="bg-blue-700 hover:bg-blue-800 text-white px-6 py-2 rounded-lg shadow-lg transition-all"
          >
            üé£ –ù–∞—á–∞—Ç—å —Ä—ã–±–∞–ª–∫—É
          </button>
        </div>
      )}

      <FishingDialog />
      <CreateFishModal
        isOpen={isCreateFishModalOpen}
        onClose={() => setIsCreateFishModalOpen(false)}
        onCreate={handleCreateFish}
        pondId={pondId}
      />
      
      {/* –ù–æ–≤–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ä—ã–± */}
      <CreateFishesModal
        isOpen={isCreateFishesModalOpen}
        onClose={() => setIsCreateFishesModalOpen(false)}
        onCreate={handleCreateFishes}
        pondId={pondId}
      />
    </>
  );
}
      

export default function Pond() {
  return (
    <PondProvider>
      <PondInner />
    </PondProvider>
  );
}